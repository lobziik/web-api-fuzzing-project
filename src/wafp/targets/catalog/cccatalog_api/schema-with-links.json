{
  "swagger": "2.0",
  "info": {
    "title": "Creative Commons Catalog API",
    "description": "\n# Introduction\nThe Creative Commons Catalog API ('cccatalog-api') is a system\nthat allows programmatic access to public domain digital media. It is our\nambition to index and catalog billions of Creative Commons works, including\narticles, songs, videos, photographs, paintings, and more. Using this API,\ndevelopers will be able to access the digital commons in their own\napplications.\n\nPlease note that there is a rate limit of 5000 requests per day and\n60 requests per minute rate limit in place for anonymous users. This is fine\nfor introducing yourself to the API, but we strongly recommend that you obtain\nan API key as soon as possible. Authorized clients have a higher rate limit\nof 10000 requests per day and 100 requests per minute. Additionally, Creative\nCommons can give your key an even higher limit that fits your application's\nneeds. See the Register and Authenticate section for instructions on obtaining\nan API key.\n\n# Register and Authenticate\n\n## Register for a key\nBefore using the CC Catalog API, you need to register access via OAuth2. \nThis can be done using the `/v1/auth_tokens/register` endpoint. \n\n<br>\nExample on how to register for a key\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"My amazing project\", \"description\": \"To access CC Catalog API\", \"email\": \"cccatalog-api@creativecommons.org\"}' https://api.creativecommons.engineering/v1/auth_tokens/register\n```\n\n<br>\nIf your request is succesful, you will get a `client_id` and `client_secret`.\n\nExample of successful request\n\n```\n{\n    \"client_secret\" : \"YhVjvIBc7TuRJSvO2wIi344ez5SEreXLksV7GjalLiKDpxfbiM8qfUb5sNvcwFOhBUVzGNdzmmHvfyt6yU3aGrN6TAbMW8EOkRMOwhyXkN1iDetmzMMcxLVELf00BR2e\",\n    \"client_id\" : \"pm8GMaIXIhkjQ4iDfXLOvVUUcIKGYRnMlZYApbda\",\n    \"name\" : \"My amazing project\"\n}\n```\n\n## Authenticate\nIn order to use the CC Catalog API endpoints, you need to include access token in the header.\nThis can be done by exchanging your client credentials for a token using the `v1/auth_tokens/token/` endpoint.\n\n<br>\nExample on how to authenticate using OAuth2\n\n```\n$ curl -X POST -d \"client_id=pm8GMaIXIhkjQ4iDfXLOvVUUcIKGYRnMlZYApbda&client_secret=YhVjvIBc7TuRJSvO2wIi344ez5SEreXLksV7GjalLiKDpxfbiM8qfUb5sNvcwFOhBUVzGNdzmmHvfyt6yU3aGrN6TAbMW8EOkRMOwhyXkN1iDetmzMMcxLVELf00BR2e&grant_type=client_credentials\" https://api.creativecommons.engineering/v1/auth_tokens/token/\n```\n\n<br>\nIf your request is successful, you will get an access token.\n\nExample of successful request\n\n```\n {\n    \"access_token\" : \"DLBYIcfnKfolaXKcmMC8RIDCavc2hW\",\n    \"scope\" : \"read write groups\",\n    \"expires_in\" : 36000,\n    \"token_type\" : \"Bearer\"\n }\n```\n\nCheck your email for a verification link. After you have followed the link, your API key will be activated.\n\n## Using Access Token\nInclude the `access_token` in the authorization header to use your key in your future API requests.\n\n<br>\nExample\n\n```\n$ curl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=test\n```\n<br>\n<blockquote>\n   <b>NOTE :</b> Your token will be throttled like an anonymous user    until the email address has been verified.\n</blockquote>\n\n# Glossary\n\n#### Access Token\nA private string that authorizes an application to make API requests \n\n#### API\nAn abbreviation for Application Programming Interface.\n\n#### CC\nAn abbreviation for Creative Commons.\n\n#### Client ID\nA publicly exposed string used by CC Catalog API to identify the application.\n\n#### Client Secret\nA private string that authenticates the identity of the application to the CC Catalog API.\n\n#### Copyright\nA type of intellectual property that gives the owner an exclusive right to reproduce, publish, sell or distribute content.\n\n#### Mature content\nAny content that requires the audience to be 18 and older.\n\n#### OAuth2\nAn authorization framework that enables a third party application to get access to an HTTP service.\n\n#### Sensitive content\nAny content that depicts graphic violence, adult content, and hostility or malice against others based on their race, religion, disability, sexual orientation, ethnicity and national origin.\n\n# Contribute\n\nWe love pull requests! If you’re interested in [contributing on Github](https://github.com/creativecommons/cccatalog-api), here’s a todo list to get started.\n\n- Read up about [Django REST Framework](https://www.django-rest-framework.org/), which is the framework used to build CC Catalog API\n- Read up about [drf-yasg](https://drf-yasg.readthedocs.io/en/stable/), which is a tool used to generate real Swagger/OpenAPI 2.0 specifications\n- Read up about Documentation Guidelines, which provides guidelines on how to contribute to documentation, documentation styles and cheat sheet for drf-yasg\n- Run the server locally by following this [link](https://github.com/creativecommons/cccatalog-api#running-the-server-locally)\n- Update documentation or codebase\n- Make sure the updates passed the automated tests in this [file](https://github.com/creativecommons/cccatalog-api/blob/master/.github/workflows/integration-tests.yml)\n- Commit and push\n- Create pull request\n",
    "termsOfService": "https://api.creativecommons.engineering/terms_of_service.html",
    "contact": {
      "email": "cccatalog-api@creativecommons.org"
    },
    "license": {
      "name": "MIT License",
      "url": "https://github.com/creativecommons/cccatalog-api/blob/master/LICENSE"
    },
    "x-logo": {
      "url": "https://mirrors.creativecommons.org/presskit/logos/cc.logo.svg",
      "backgroundColor": "#FFFFFF"
    },
    "version": "Version not specified."
  },
  "host": "0.0.0.0:44119",
  "schemes": [
    "http"
  ],
  "basePath": "/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "securityDefinitions": {},
  "paths": {
    "/auth_tokens/register": {
      "post": {
        "operationId": "register_api_oauth2",
        "description": "\nregister_api_oauth2 is an API endpoint to register access to the API via OAuth2.\n\nUpon registering, you will receive a `client_id` and `client_secret`, \nwhich you can then use to authenticate using the standard OAuth2 Client \nCredentials flow. See the Register and Authenticate section for instructions on registering access to the API via OAuth2.\n<br>\n<blockquote>\n    <b>WARNING :</b> You must keep <code>client_secret</code> confidential, \n    as anybody with your <code>client_secret</code> can impersonate your application.\n</blockquote>\n\nAuthenticated users have higher rate limits than anonymous users. \nAdditionally, by identifying yourself, you can request Creative Commons to \nadjust your personal rate limit depending on your organization's needs.\n\nYou can also refer to Bash's Request Samples for examples on how to use this endpoint.\n",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "name",
                "description",
                "email"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "title": "Name",
                  "description": "A unique human-readable name for your application or project requiring access to the CC Catalog API.",
                  "type": "string",
                  "maxLength": 150,
                  "minLength": 1,
                  "unique": true
                },
                "description": {
                  "title": "Description",
                  "description": "A description of what you are trying to achieve with your project using the API. Please provide as much detail as possible!",
                  "type": "string",
                  "maxLength": 10000,
                  "minLength": 1
                },
                "email": {
                  "title": "Email",
                  "description": "A valid email that we can reach you at if we have any questions about your use case or data consumption.",
                  "type": "string",
                  "format": "email",
                  "maxLength": 254,
                  "minLength": 1
                }
              },
              "example": {
                "name": "My amazing project",
                "description": "To access CC Catalog API",
                "email": "cccatalog-api@creativecommons.org"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuth2RegistrationSuccessful"
            },
            "examples": {
              "application/json": {
                "name": "My amazing project",
                "client_id": "pm8GMaIXIhkjQ4iDfXLOvVUUcIKGYRnMlZYApbda",
                "client_secret": "YhVjvIBc7TuRJSvO2wIi344ez5SEreXLksV7GjalLiKDpxfbiM8qfUb5sNvcwFOhBUVzGNdzmmHvfyt6yU3aGrN6TAbMW8EOkRMOwhyXkN1iDetmzMMcxLVELf00BR2e"
              }
            }
          }
        },
        "tags": [
          "auth_tokens"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Register for a key\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"My amazing project\", \"description\": \"To access CC Catalog API\", \"email\": \"cccatalog-api@creativecommons.org\"}' https://api.creativecommons.engineering/v1/auth_tokens/register\n"
          }
        ]
      },
      "parameters": []
    },
    "/images": {
      "get": {
        "operationId": "image_search",
        "description": "\nimage_search is an API endpoint to search images using a query string.\n\nBy using this endpoint, you can obtain search results based on specified \nquery and optionally filter results by `license`, `license_type`, \n`page`, `page_size`, `creator`, `tags`, `title`, `filter_dead`, \n`source`, `extension`, `categories`, `aspect_ratio`, `size`, `mature`, \nand `qa`. Results are ranked in order of relevance.\n\nAlthough there may be millions of relevant records, only the most \nrelevant several thousand records can be viewed. This is by design: \nthe search endpoint should be used to find the top 10,000 most relevant \nresults, not for exhaustive search or bulk download of every barely \nrelevant result. As such, the caller should not try to access pages \nbeyond `page_count`, or else the server will reject the query.\n\nFor more precise results, you can go to the \n[CC Search Syntax Guide](https://search.creativecommons.org/search-help) \nfor information about creating queries and \n[Apache Lucene Syntax Guide](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html)\nfor information on structuring advanced searches.\n\nYou can refer to Bash's Request Samples for examples on how to use\nthis endpoint.\n",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "A query string that should not exceed 200 characters in length",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "license",
            "in": "query",
            "description": "A comma-separated list of licenses. Example: `by,cc0`. Valid inputs: `['CC0', 'BY-SA', 'BY-NC', 'BY-ND', 'BY', 'BY-NC-ND', 'PDM', 'BY-NC-SA']`",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "license_type",
            "in": "query",
            "description": "A list of license types. Valid inputs: `['all', 'all-cc', 'commercial', 'modification']`",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve.",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The number of results to return in the requested page. Should be an integer between 1 and 500.",
            "required": false,
            "type": "integer",
            "default": 20
          },
          {
            "name": "creator",
            "in": "query",
            "description": "Search by creator only. Cannot be used with `q`.",
            "required": false,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Search by tag only. Cannot be used with `q`.",
            "required": false,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search by title only. Cannot be used with `q`.",
            "required": false,
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          {
            "name": "filter_dead",
            "in": "query",
            "description": "Control whether 404 links are filtered out.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "source",
            "in": "query",
            "description": "A comma separated list of data sources to search. Valid inputs: `['none_found']`",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "extension",
            "in": "query",
            "description": "A comma separated list of desired file extensions.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "categories",
            "in": "query",
            "description": "A comma separated list of categories; available categories include `illustration`, `photograph`, and `digitized_artwork`.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "aspect_ratio",
            "in": "query",
            "description": "A comma separated list of aspect ratios; available aspect ratios include `tall`, `wide`, and `square`.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "size",
            "in": "query",
            "description": "A comma separated list of image sizes; available sizes include `small`, `medium`, or `large`.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "mature",
            "in": "query",
            "description": "Whether to include content for mature audiences.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "qa",
            "in": "query",
            "description": "If enabled, searches are performed against the quality assurance index instead of production.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageSearchResults"
              }
            },
            "examples": {
              "application/json": {
                "result_count": 77,
                "page_count": 77,
                "page_size": 1,
                "results": [
                  {
                    "title": "File:Well test separator.svg",
                    "id": "36537842-b067-4ca0-ad67-e00ff2e06b2d",
                    "creator": "en:User:Oil&GasIndustry",
                    "creator_url": "https://en.wikipedia.org/wiki/User:Oil%26GasIndustry",
                    "url": "https://upload.wikimedia.org/wikipedia/commons/3/3a/Well_test_separator.svg",
                    "thumbnail": "https://api.creativecommons.engineering/v1/thumbs/36537842-b067-4ca0-ad67-e00ff2e06b2d",
                    "provider": "wikimedia",
                    "source": "wikimedia",
                    "license": "by",
                    "license_version": "3.0",
                    "license_url": "https://creativecommons.org/licenses/by/3.0",
                    "foreign_landing_url": "https://commons.wikimedia.org/w/index.php?curid=26229990",
                    "detail_url": "http://api.creativecommons.engineering/v1/images/36537842-b067-4ca0-ad67-e00ff2e06b2d",
                    "related_url": "http://api.creativecommons.engineering/v1/recommendations/images/36537842-b067-4ca0-ad67-e00ff2e06b2d",
                    "fields_matched": [
                      "description",
                      "title"
                    ]
                  }
                ]
              }
            },
            "x-links": {
              "GET /images/{identifier}": {
                "parameters": {
                  "identifier": "$response.body#/0/results/0/id"
                },
                "operationId": "image_detail"
              },
              "POST /images/{identifier}/report": {
                "parameters": {
                  "identifier": "$response.body#/0/results/0/id"
                },
                "operationId": "images_report_create"
              },
              "GET /recommendations/images/{identifier}": {
                "parameters": {
                  "identifier": "$response.body#/0/results/0/id"
                },
                "operationId": "recommendations_images_read"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/InputError"
            },
            "examples": {
              "application/json": {
                "error": "InputError",
                "detail": "Invalid input given for fields. 'license' -> License 'PDMNBCG' does not exist.",
                "fields": [
                  "license"
                ]
              }
            }
          }
        },
        "tags": [
          "images"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Example 1: Search for an exact match of Claude Monet\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=\"Claude Monet\"\n\n# Example 2: Search for images related to both dog and cat\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=dog+cat\n\n# Example 3: Search for images related to dog or cat, but not necessarily both\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=dog|cat\n\n# Example 4: Search for images related to dog but won't include results related to 'pug'\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=dog -pug\n\n# Example 5: Search for images matching anything with the prefix ‘net’\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=net*\n\n# Example 6: Search for images that match dogs that are either corgis or labrador\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=dogs + (corgis | labrador)\n\n# Example 7: Search for images that match strings close to the term theater with a difference of one character\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=theatre~1\n\n# Example 8: Search for images using single query parameter\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=test\n\n# Example 9: Search for images using multiple query parameters\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" https://api.creativecommons.engineering/v1/images?q=test&license=pdm,by&categories=illustration&page_size=1&page=1   \n"
          }
        ]
      },
      "parameters": []
    },
    "/images/{identifier}": {
      "get": {
        "operationId": "image_detail",
        "description": "\nimage_detail is an API endpoint to get the details of a specified \nimage ID.\n\nBy using this endpoint, you can get image details such as `title`, `id`, \n`creator`, `creator_url`, `tags`, `url`, `thumbnail`, `provider`, \n`source`, `license`, `license_version`, `license_url`, \n`foreign_landing_url`, `detail_url`, `related_url`, `height`, `weight`, \nand `attribution`.\n\nYou can refer to Bash's Request Samples for example on how to use\nthis endpoint.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            },
            "examples": {
              "application/json": {
                "title": "exam test",
                "id": "7c829a03-fb24-4b57-9b03-65f43ed19395",
                "creator": "Sean MacEntee",
                "creator_url": "https://www.flickr.com/photos/18090920@N07",
                "tags": [
                  {
                    "name": "exam"
                  },
                  {
                    "name": "test"
                  }
                ],
                "url": "https://live.staticflickr.com/5122/5264886972_3234d62748.jpg",
                "thumbnail": "https://api.creativecommons.engineering/v1/thumbs/7c829a03-fb24-4b57-9b03-65f43ed19395",
                "provider": "flickr",
                "source": "flickr",
                "license": "by",
                "license_version": "2.0",
                "license_url": "https://creativecommons.org/licenses/by/2.0/",
                "foreign_landing_url": "https://www.flickr.com/photos/18090920@N07/5264886972",
                "detail_url": "http://api.creativecommons.engineering/v1/images/7c829a03-fb24-4b57-9b03-65f43ed19395",
                "related_url": "http://api.creativecommons.engineering/v1/recommendations/images/7c829a03-fb24-4b57-9b03-65f43ed19395",
                "height": 167,
                "width": 500,
                "attribution": "\"exam test\" by Sean MacEntee is licensed under CC-BY 2.0. To view a copy of this license, visit https://creativecommons.org/licenses/by/2.0/"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "examples": {
              "application/json": {
                "detail": "Not found."
              }
            }
          }
        },
        "tags": [
          "images"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Get the details of image ID (7c829a03-fb24-4b57-9b03-65f43ed19395)\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" http://api.creativecommons.engineering/v1/images/7c829a03-fb24-4b57-9b03-65f43ed19395\n"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "in": "path",
          "description": "Our unique identifier for a CC work.",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/images/{identifier}/report": {
      "post": {
        "operationId": "images_report_create",
        "summary": "images_report_create",
        "description": "images_report_create is an API endpoint to report an issue about a \nspecified image ID to Creative Commons.\n\nBy using this endpoint, you can report an image if it infringes copyright, \ncontains mature or sensitive content and others.\n\nYou can refer to Bash's Request Samples for example on how to use\nthis endpoint.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "reason",
                "identifier"
              ],
              "type": "object",
              "properties": {
                "reason": {
                  "title": "Reason",
                  "description": "The reason to report image to Creative Commons.",
                  "type": "string",
                  "enum": [
                    "mature",
                    "dmca",
                    "other"
                  ],
                  "maxLength": 20
                },
                "identifier": {
                  "title": "Identifier",
                  "description": "The ID for image to be reported.",
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "title": "Description",
                  "description": "The explanation on why image is being reported.",
                  "type": "string",
                  "maxLength": 500,
                  "nullable": true
                }
              },
              "example": {
                "reason": "mature",
                "identifier": "7c829a03-fb24-4b57-9b03-65f43ed19395",
                "description": "This image contains sensitive content"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportImage"
            },
            "examples": {
              "application/json": {
                "reason": "mature",
                "identifier": "7c829a03-fb24-4b57-9b03-65f43ed19395",
                "description": "This image contains sensitive content"
              }
            }
          }
        },
        "tags": [
          "images"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Report an issue about image ID (7c829a03-fb24-4b57-9b03-65f43ed19395)\ncurl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" -d '{\"reason\": \"mature\", \"identifier\": \"7c829a03-fb24-4b57-9b03-65f43ed19395\", \"description\": \"This image contains sensitive content\"}' https://api.creativecommons.engineering/v1/images/7c829a03-fb24-4b57-9b03-65f43ed19395/report\n"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "in": "path",
          "description": "The ID for image to be reported.",
          "required": true,
          "type": "string",
          "format": "uuid"
        }
      ]
    },
    "/oembed": {
      "get": {
        "operationId": "oembed_list",
        "description": "\noembed_list is an API endpoint to retrieve embedded content from a \nspecified image URL.\n\nBy using this endpoint, you can retrieve embedded content such as \n`version`, `type`, `width`, `height`, `title`, `author_name`, \n`author_url`, and `license_url`.\n\nYou can refer to Bash's Request Samples for example on how to use\nthis endpoint.\n",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The link to an image.",
            "required": true,
            "type": "string",
            "format": "uri",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OembedResponse"
            },
            "examples": {
              "application/json": {
                "version": 1,
                "type": "photo",
                "width": 500,
                "height": 167,
                "title": "exam test",
                "author_name": "Sean MacEntee",
                "author_url": "https://www.flickr.com/photos/18090920@N07",
                "license_url": "https://creativecommons.org/licenses/by/2.0/"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "examples": {
              "application/json": {
                "detail": "An internal server error occurred."
              }
            }
          }
        },
        "tags": [
          "oembed"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Retrieve embedded content from image URL (https://ccsearch.creativecommons.org/photos/7c829a03-fb24-4b57-9b03-65f43ed19395)\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" http://api.creativecommons.engineering/v1/oembed?url=https://ccsearch.creativecommons.org/photos/7c829a03-fb24-4b57-9b03-65f43ed19395\n"
          }
        ]
      },
      "parameters": []
    },
    "/rate_limit": {
      "get": {
        "operationId": "key_info",
        "description": "\nkey_info is an API endpoint to get information about your API key.\n\nYou can use this endpoint to get information about your API key such as \nrequests_this_minute, requests_today, and rate_limit_model. \n\n<blockquote>\n    <b>NOTE :</b> If you get a 403 Forbidden response, it means your \n    access token has expired.\n</blockquote>\n\n<br>\nYou can refer to Bash's Request Samples for example on how to use\nthis endpoint.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuth2KeyInfo"
            },
            "examples": {
              "application/json": {
                "requests_this_minute": 2,
                "requests_today": 40,
                "rate_limit_model": "enhanced"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenError"
            },
            "examples": {
              "application/json": "Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "examples": {
              "application/json": "Unknown API key rate limit type"
            }
          }
        },
        "tags": [
          "rate_limit"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Get information about your API key\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" http://api.creativecommons.engineering/v1/rate_limit\n"
          }
        ]
      },
      "parameters": []
    },
    "/recommendations/images/{identifier}": {
      "get": {
        "operationId": "recommendations_images_read",
        "description": "\nrecommendations_images_read is an API endpoint to get related images \nfor a specified image ID.\n\nBy using this endpoint, you can get the details of related images such as \n`title`, `id`, `creator`, `creator_url`, `tags`, `url`, `thumbnail`, \n`provider`, `source`, `license`, `license_version`, `license_url`, \n`foreign_landing_url`, `detail_url`, `related_url`, `height`, `weight`, \nand `attribution`.\n\nYou can refer to Bash's Request Samples for example on how to use\nthis endpoint.\n",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The unique identifier for the image.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            },
            "examples": {
              "application/json": {
                "result_count": 10000,
                "page_count": 0,
                "results": [
                  {
                    "title": "exam tactics",
                    "id": "610756ec-ae31-4d5e-8f03-8cc52f31b71d",
                    "creator": "Sean MacEntee",
                    "creator_url": "https://www.flickr.com/photos/18090920@N07",
                    "tags": [
                      {
                        "name": "exam"
                      },
                      {
                        "name": "tactics"
                      }
                    ],
                    "url": "https://live.staticflickr.com/4065/4459771899_07595dc42e.jpg",
                    "thumbnail": "https://api.creativecommons.engineering/v1/thumbs/610756ec-ae31-4d5e-8f03-8cc52f31b71d",
                    "provider": "flickr",
                    "source": "flickr",
                    "license": "by",
                    "license_version": "2.0",
                    "license_url": "https://creativecommons.org/licenses/by/2.0/",
                    "foreign_landing_url": "https://www.flickr.com/photos/18090920@N07/4459771899",
                    "detail_url": "http://api.creativecommons.engineering/v1/images/610756ec-ae31-4d5e-8f03-8cc52f31b71d",
                    "related_url": "http://api.creativecommons.engineering/v1/recommendations/images/610756ec-ae31-4d5e-8f03-8cc52f31b71d"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "examples": {
              "application/json": {
                "detail": "An internal server error occurred."
              }
            }
          }
        },
        "tags": [
          "recommendations"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Get related images for image ID (7c829a03-fb24-4b57-9b03-65f43ed19395)\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" http://api.creativecommons.engineering/v1/recommendations/images/7c829a03-fb24-4b57-9b03-65f43ed19395\n"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/sources": {
      "get": {
        "operationId": "image_stats",
        "description": "\nimage_stats is an API endpoint to get a list of all content providers \nand their respective number of images in the Creative Commons catalog.\n\nYou can use this endpoint to get details about content providers \nsuch as `source_name`, `image_count`, `display_name`, and `source_url`.\n\nYou can refer to Bash's Request Samples for example on how to use\nthis endpoint.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AboutImageResponse"
              }
            },
            "examples": {
              "application/json": {
                "source_name": "flickr",
                "image_count": 465809213,
                "display_name": "Flickr",
                "source_url": "https://www.flickr.com"
              }
            }
          }
        },
        "tags": [
          "sources"
        ],
        "x-code-samples": [
          {
            "lang": "Bash",
            "source": "\n# Get a list of content providers and their image count\ncurl -H \"Authorization: Bearer DLBYIcfnKfolaXKcmMC8RIDCavc2hW\" http://api.creativecommons.engineering/v1/sources\n"
          }
        ]
      },
      "parameters": []
    }
  },
  "definitions": {
    "OAuth2RegistrationSuccessful": {
      "required": [
        "name",
        "client_id",
        "client_secret"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "A unique human-readable name for your application or project requiring access to the CC Catalog API.",
          "type": "string",
          "minLength": 1
        },
        "client_id": {
          "title": "Client id",
          "description": "A publicly exposed string used by CC Catalog API to identify the application.",
          "type": "string",
          "minLength": 1
        },
        "client_secret": {
          "title": "Client secret",
          "description": "A private string that authenticates the identity of the application to the CC Catalog API.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Tag": {
      "description": "Tags with detailed metadata, such as accuracy.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The name of a detailed tag.",
          "type": "string",
          "minLength": 1
        },
        "accuracy": {
          "title": "Accuracy",
          "description": "The accuracy of a machine-generated tag. Human-generated tags do not have an accuracy field.",
          "type": "number"
        }
      }
    },
    "Image": {
      "description": "An array of images and their details such as `title`, `id`, `creator`, `creator_url`, `url`, `thumbnail`, `provider`, `source`, `license`, `license_version`, `license_url`, `foreign_landing_url`, `detail_url`, `related_url`, and `fields_matched `.",
      "required": [
        "id",
        "url"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "The name of image.",
          "type": "string",
          "minLength": 1
        },
        "id": {
          "title": "Id",
          "description": "The unique identifier for the image.",
          "type": "string",
          "minLength": 1
        },
        "creator": {
          "title": "Creator",
          "description": "The name of user who creates the image.",
          "type": "string"
        },
        "creator_url": {
          "title": "Creator url",
          "description": "A direct link to the image's creator.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "tags": {
          "description": "Tags with detailed metadata, such as accuracy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "url": {
          "title": "Url",
          "description": "A direct link to the image.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "thumbnail": {
          "title": "Thumbnail",
          "description": "A direct link to the miniature image.",
          "type": "string",
          "readOnly": true
        },
        "provider": {
          "title": "Provider",
          "description": "The name of data provider.",
          "type": "string",
          "minLength": 1
        },
        "source": {
          "title": "Source",
          "description": "The name of data source.",
          "type": "string",
          "minLength": 1
        },
        "license": {
          "title": "License",
          "description": "The name of license for the image",
          "type": "string",
          "readOnly": true
        },
        "license_version": {
          "title": "License version",
          "description": "The type of license for the image.",
          "type": "string",
          "minLength": 1
        },
        "license_url": {
          "title": "License url",
          "description": "A direct link to the image's license.",
          "type": "string",
          "readOnly": true
        },
        "foreign_landing_url": {
          "title": "Foreign landing url",
          "description": "A foreign landing link for the image.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "detail_url": {
          "title": "Detail url",
          "description": "A direct link to the detail view of this image.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "related_url": {
          "title": "Related url",
          "description": "A link to an endpoint that provides similar images.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "fields_matched": {
          "description": "List the fields that matched the query for this result.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "height": {
          "title": "Height",
          "description": "The height of the image in pixels. Not always available.",
          "type": "integer"
        },
        "width": {
          "title": "Width",
          "description": "The width of the image in pixels. Not always available.",
          "type": "integer"
        },
        "attribution": {
          "title": "Attribution",
          "description": "The Creative Commons attribution of the work. Use this to give credit to creators to their works and fulfill legal attribution requirements.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ImageSearchResults": {
      "required": [
        "result_count",
        "page_count",
        "page_size",
        "results"
      ],
      "type": "object",
      "properties": {
        "result_count": {
          "title": "Result count",
          "description": "The total number of images returned by search result.",
          "type": "integer"
        },
        "page_count": {
          "title": "Page count",
          "description": "The total number of pages returned by search result.",
          "type": "integer"
        },
        "page_size": {
          "title": "Page size",
          "description": "The number of images per page.",
          "type": "integer"
        },
        "results": {
          "description": "An array of images and their details such as `title`, `id`, `creator`, `creator_url`, `url`, `thumbnail`, `provider`, `source`, `license`, `license_version`, `license_url`, `foreign_landing_url`, `detail_url`, `related_url`, and `fields_matched `.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },
    "InputError": {
      "required": [
        "error",
        "detail",
        "fields"
      ],
      "type": "object",
      "properties": {
        "error": {
          "title": "Error",
          "description": "The name of error.",
          "type": "string",
          "minLength": 1
        },
        "detail": {
          "title": "Detail",
          "description": "The description for error.",
          "type": "string",
          "minLength": 1
        },
        "fields": {
          "description": "List of query parameters that causes error.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NotFoundError": {
      "required": [
        "detail"
      ],
      "type": "object",
      "properties": {
        "detail": {
          "title": "Detail",
          "description": "The description for error",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ReportImage": {
      "required": [
        "reason",
        "identifier"
      ],
      "type": "object",
      "properties": {
        "reason": {
          "title": "Reason",
          "description": "The reason to report image to Creative Commons.",
          "type": "string",
          "enum": [
            "mature",
            "dmca",
            "other"
          ]
        },
        "identifier": {
          "title": "Identifier",
          "description": "The ID for image to be reported.",
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "title": "Description",
          "description": "The explanation on why image is being reported.",
          "type": "string",
          "maxLength": 500,
          "x-nullable": true
        }
      }
    },
    "OembedResponse": {
      "required": [
        "version",
        "type",
        "width",
        "height",
        "title",
        "author_name",
        "author_url",
        "license_url"
      ],
      "type": "object",
      "properties": {
        "version": {
          "title": "Version",
          "description": "The image version.",
          "type": "integer"
        },
        "type": {
          "title": "Type",
          "description": "Type of data.",
          "type": "string",
          "minLength": 1
        },
        "width": {
          "title": "Width",
          "description": "The width of the image in pixels.",
          "type": "integer"
        },
        "height": {
          "title": "Height",
          "description": "The height of the image in pixels.",
          "type": "integer"
        },
        "title": {
          "title": "Title",
          "description": "The name of image.",
          "type": "string",
          "minLength": 1
        },
        "author_name": {
          "title": "Author name",
          "description": "The name of author for image.",
          "type": "string",
          "minLength": 1
        },
        "author_url": {
          "title": "Author url",
          "description": "A direct link to the author.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "license_url": {
          "title": "License url",
          "description": "A direct link to the license for image.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        }
      }
    },
    "OAuth2KeyInfo": {
      "required": [
        "requests_this_minute",
        "requests_today",
        "rate_limit_model"
      ],
      "type": "object",
      "properties": {
        "requests_this_minute": {
          "title": "Requests this minute",
          "description": "The number of requests your key has performed in the last minute.",
          "type": "integer"
        },
        "requests_today": {
          "title": "Requests today",
          "description": "The number of requests your key has performed in the last day.",
          "type": "integer"
        },
        "rate_limit_model": {
          "title": "Rate limit model",
          "description": "The type of rate limit applied to your key. Can be 'standard' or 'enhanced'; enhanced users enjoy higher rate limits than their standard key counterparts. Contact Creative Commons if you need a higher rate limit.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ForbiddenError": {
      "required": [
        "detail"
      ],
      "type": "object",
      "properties": {
        "detail": {
          "title": "Detail",
          "description": "The description for error",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "InternalServerError": {
      "required": [
        "detail"
      ],
      "type": "object",
      "properties": {
        "detail": {
          "title": "Detail",
          "description": "The description for error",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "AboutImageResponse": {
      "required": [
        "source_name",
        "image_count",
        "display_name",
        "source_url"
      ],
      "type": "object",
      "properties": {
        "source_name": {
          "title": "Source name",
          "description": "The source of the image.",
          "type": "string",
          "minLength": 1
        },
        "image_count": {
          "title": "Image count",
          "description": "The number of images.",
          "type": "integer"
        },
        "display_name": {
          "title": "Display name",
          "description": "The name of content provider.",
          "type": "string",
          "minLength": 1
        },
        "source_url": {
          "title": "Source url",
          "description": "The actual URL to the `source_name`.",
          "type": "string",
          "minLength": 1
        }
      }
    }
  }
}
